##################################################
#
# Copyright 2013 DERI, National University of Ireland Galway.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# file: RobustCommunityAnalysis_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py --complexType RobustCommunityAnalysis.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://robust.softwaremind.pl/HealthIndicatorService
##############################

class ns0:
    targetNamespace = "http://robust.softwaremind.pl/HealthIndicatorService"

    class datasource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "datasource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.datasource_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    return
            Holder.__name__ = "datasource_Holder"
            self.pyclass = Holder

    class community_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "community")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.community_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    self._startDate = None
                    self._endDate = None
                    return
            Holder.__name__ = "community_Holder"
            self.pyclass = Holder

    class indicator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "indicator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.indicator_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    return
            Holder.__name__ = "indicator_Holder"
            self.pyclass = Holder

    class score_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "score")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.score_Def.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","indicator",lazy=False)(pname=(ns,"indicator"), aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._indicator = None
                    self._value = None
                    return
            Holder.__name__ = "score_Holder"
            self.pyclass = Holder

    class ListOfDataSources_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "ListOfDataSources")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListOfDataSources_Def.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","datasource",lazy=False)(pname=(ns,"datasource"), aname="_datasource", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datasource = []
                    return
            Holder.__name__ = "ListOfDataSources_Holder"
            self.pyclass = Holder

    class ListOfCommunities_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "ListOfCommunities")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListOfCommunities_Def.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","community",lazy=False)(pname=(ns,"community"), aname="_community", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._community = []
                    return
            Holder.__name__ = "ListOfCommunities_Holder"
            self.pyclass = Holder

    class ListOfIndicators_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "ListOfIndicators")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListOfIndicators_Def.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","indicator",lazy=False)(pname=(ns,"indicator"), aname="_indicator", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._indicator = []
                    return
            Holder.__name__ = "ListOfIndicators_Holder"
            self.pyclass = Holder

    class ListOfScores_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        type = (schema, "ListOfScores")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListOfScores_Def.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","score",lazy=False)(pname=(ns,"score"), aname="_score", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._score = []
                    return
            Holder.__name__ = "ListOfScores_Holder"
            self.pyclass = Holder

    class getDataSourcesRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDataSourcesRequest"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getDataSourcesRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessKey"), aname="_accessKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getDataSourcesRequest")
            kw["aname"] = "_getDataSourcesRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessKey = None
                    return
            Holder.__name__ = "getDataSourcesRequest_Holder"
            self.pyclass = Holder

    class getDataSourcesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDataSourcesResponse"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getDataSourcesResponse_Dec.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","ListOfDataSources",lazy=False)(pname=(ns,"datasources"), aname="_datasources", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getDataSourcesResponse")
            kw["aname"] = "_getDataSourcesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datasources = None
                    return
            Holder.__name__ = "getDataSourcesResponse_Holder"
            self.pyclass = Holder

    class getCommunitiesRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCommunitiesRequest"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getCommunitiesRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessKey"), aname="_accessKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getCommunitiesRequest")
            kw["aname"] = "_getCommunitiesRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessKey = None
                    self._dataSourceId = None
                    return
            Holder.__name__ = "getCommunitiesRequest_Holder"
            self.pyclass = Holder

    class getCommunitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCommunitiesResponse"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getCommunitiesResponse_Dec.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","ListOfCommunities",lazy=False)(pname=(ns,"communities"), aname="_communities", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getCommunitiesResponse")
            kw["aname"] = "_getCommunitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communities = None
                    return
            Holder.__name__ = "getCommunitiesResponse_Holder"
            self.pyclass = Holder

    class getIndicatorsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getIndicatorsRequest"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getIndicatorsRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessKey"), aname="_accessKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"communityId"), aname="_communityId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getIndicatorsRequest")
            kw["aname"] = "_getIndicatorsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessKey = None
                    self._dataSourceId = None
                    self._communityId = None
                    return
            Holder.__name__ = "getIndicatorsRequest_Holder"
            self.pyclass = Holder

    class getIndicatorsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getIndicatorsResponse"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getIndicatorsResponse_Dec.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","ListOfIndicators",lazy=False)(pname=(ns,"indicators"), aname="_indicators", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getIndicatorsResponse")
            kw["aname"] = "_getIndicatorsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._indicators = None
                    return
            Holder.__name__ = "getIndicatorsResponse_Holder"
            self.pyclass = Holder

    class getHealthScoreRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHealthScoreRequest"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getHealthScoreRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessKey"), aname="_accessKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"communityId"), aname="_communityId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"indicatorId"), aname="_indicatorId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getHealthScoreRequest")
            kw["aname"] = "_getHealthScoreRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessKey = None
                    self._dataSourceId = None
                    self._communityId = None
                    self._indicatorId = None
                    self._startDate = None
                    self._endDate = None
                    return
            Holder.__name__ = "getHealthScoreRequest_Holder"
            self.pyclass = Holder

    class getHealthScoreResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHealthScoreResponse"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getHealthScoreResponse_Dec.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","score",lazy=False)(pname=(ns,"score"), aname="_score", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getHealthScoreResponse")
            kw["aname"] = "_getHealthScoreResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._score = None
                    return
            Holder.__name__ = "getHealthScoreResponse_Holder"
            self.pyclass = Holder

    class getHealthScoresRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHealthScoresRequest"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getHealthScoresRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessKey"), aname="_accessKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"communityId"), aname="_communityId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getHealthScoresRequest")
            kw["aname"] = "_getHealthScoresRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessKey = None
                    self._dataSourceId = None
                    self._communityId = None
                    self._startDate = None
                    self._endDate = None
                    return
            Holder.__name__ = "getHealthScoresRequest_Holder"
            self.pyclass = Holder

    class getHealthScoresResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHealthScoresResponse"
        schema = "http://robust.softwaremind.pl/HealthIndicatorService"
        def __init__(self, **kw):
            ns = ns0.getHealthScoresResponse_Dec.schema
            TClist = [GTD("http://robust.softwaremind.pl/HealthIndicatorService","ListOfScores",lazy=False)(pname=(ns,"scores"), aname="_scores", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://robust.softwaremind.pl/HealthIndicatorService","getHealthScoresResponse")
            kw["aname"] = "_getHealthScoresResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scores = None
                    return
            Holder.__name__ = "getHealthScoresResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://robust.softwaremind.pl/HealthIndicatorService)
