##################################################
#
# Copyright 2013 DERI, National University of Ireland Galway.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# file: RobustCommunityAnalysis_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py --complexType RobustCommunityAnalysis.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from RobustCommunityAnalysis_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
getDataSourcesRequest = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getDataSourcesRequest").pyclass

getDataSourcesResponse = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getDataSourcesResponse").pyclass

getCommunitiesRequest = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getCommunitiesRequest").pyclass

getCommunitiesResponse = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getCommunitiesResponse").pyclass

getIndicatorsRequest = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getIndicatorsRequest").pyclass

getIndicatorsResponse = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getIndicatorsResponse").pyclass

getHealthScoreRequest = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getHealthScoreRequest").pyclass

getHealthScoreResponse = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getHealthScoreResponse").pyclass

getHealthScoresRequest = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getHealthScoresRequest").pyclass

getHealthScoresResponse = GED("http://robust.softwaremind.pl/HealthIndicatorService", "getHealthScoresResponse").pyclass


# Service Skeletons
class RobustCommunityAnalysis(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/services/RobustCommunityAnalysis/', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_getDataSources(self, ps, **kw):
        request = ps.Parse(getDataSourcesRequest.typecode)
        return request,getDataSourcesResponse()

    soapAction[''] = 'soap_getDataSources'
    root[(getDataSourcesRequest.typecode.nspname,getDataSourcesRequest.typecode.pname)] = 'soap_getDataSources'

    def soap_getCommunities(self, ps, **kw):
        request = ps.Parse(getCommunitiesRequest.typecode)
        return request,getCommunitiesResponse()

    soapAction[''] = 'soap_getCommunities'
    root[(getCommunitiesRequest.typecode.nspname,getCommunitiesRequest.typecode.pname)] = 'soap_getCommunities'

    def soap_getIndicators(self, ps, **kw):
        request = ps.Parse(getIndicatorsRequest.typecode)
        return request,getIndicatorsResponse()

    soapAction[''] = 'soap_getIndicators'
    root[(getIndicatorsRequest.typecode.nspname,getIndicatorsRequest.typecode.pname)] = 'soap_getIndicators'

    def soap_getHealthScore(self, ps, **kw):
        request = ps.Parse(getHealthScoreRequest.typecode)
        return request,getHealthScoreResponse()

    soapAction[''] = 'soap_getHealthScore'
    root[(getHealthScoreRequest.typecode.nspname,getHealthScoreRequest.typecode.pname)] = 'soap_getHealthScore'

    def soap_getHealthScores(self, ps, **kw):
        request = ps.Parse(getHealthScoresRequest.typecode)
        return request,getHealthScoresResponse()

    soapAction[''] = 'soap_getHealthScores'
    root[(getHealthScoresRequest.typecode.nspname,getHealthScoresRequest.typecode.pname)] = 'soap_getHealthScores'

